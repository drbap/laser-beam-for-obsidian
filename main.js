/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  DEFAULT_SETTINGS: () => DEFAULT_SETTINGS,
  default: () => LaserBeamPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var LaserBeamSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Toggle laser beam").setDesc("Turn on/off laser beam").addButton((btn) => {
      btn.setButtonText("Toggle laser").setTooltip("Turn on/off laser").onClick((evt) => {
        this.plugin.toggleLaser(evt);
      });
    });
    new import_obsidian.Setting(containerEl).setName("Laser focus type").setDesc("Select laser focus type").addDropdown((sel) => {
      this.dropdownLaserType = sel;
      sel.addOption("line", "Line");
      sel.addOption("area", "Area");
      sel.onChange(async (val) => {
        this.plugin.settings.laserType = val;
        this.plugin.setLaserType(val);
        await this.plugin.saveSettings();
      }), sel.setValue(this.plugin.settings.laserType);
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.dropdownLaserType.setValue(DEFAULT_SETTINGS.laserType);
        this.plugin.settings.laserType = DEFAULT_SETTINGS.laserType;
        this.plugin.setLaserType(this.plugin.settings.laserType);
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Laser intensity").setDesc("Set laser intensity").addSlider((sli) => {
      this.sliderIntensity = sli;
      let slider_val;
      if (this.plugin.settings.laserIntensity) {
        slider_val = this.plugin.settings.laserIntensity;
      } else {
        slider_val = DEFAULT_SETTINGS.laserIntensity;
      }
      sli.setDynamicTooltip();
      sli.setLimits(0.5, 3, 0.1);
      sli.setValue(slider_val);
      sli.onChange((val) => {
        this.plugin.settings.laserIntensity = val;
        this.plugin.setLaserIntensity(val);
        this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.sliderIntensity.setValue(DEFAULT_SETTINGS.laserIntensity);
        this.plugin.settings.laserIntensity = DEFAULT_SETTINGS.laserIntensity;
        this.plugin.setLaserIntensity(this.plugin.settings.laserIntensity);
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Laser color").setDesc("Select laser color").addDropdown((sel) => {
      this.dropdownLaserColor = sel;
      sel.addOption("blue", "Blue laser");
      sel.addOption("green", "Green laser");
      sel.addOption("orange", "Orange laser");
      sel.addOption("yellow", "Yellow laser");
      sel.addOption("red", "Red laser");
      sel.addOption("pink", "Pink laser");
      sel.addOption("purple", "Purple laser");
      sel.onChange(async (val) => {
        this.plugin.settings.laserColor = val;
        this.plugin.setLaserColor(val);
        await this.plugin.saveSettings();
      }), sel.setValue(this.plugin.settings.laserColor);
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.dropdownLaserColor.setValue(DEFAULT_SETTINGS.laserColor);
        this.plugin.settings.laserColor = DEFAULT_SETTINGS.laserColor;
        this.plugin.setLaserColor(this.plugin.settings.laserColor);
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Laser area size").setDesc("Adjust laser area size").addSlider((sli) => {
      this.sliderArea = sli;
      let slider_val;
      if (this.plugin.settings.laserArea) {
        slider_val = this.plugin.settings.laserArea;
      } else {
        slider_val = DEFAULT_SETTINGS.laserArea;
      }
      sli.setDynamicTooltip();
      sli.setLimits(30, 200, 1);
      sli.setValue(slider_val);
      sli.onChange((val) => {
        this.plugin.settings.laserArea = val;
        this.plugin.setLaserArea(val);
        this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.sliderArea.setValue(DEFAULT_SETTINGS.laserArea);
        this.plugin.settings.laserArea = DEFAULT_SETTINGS.laserArea;
        this.plugin.setLaserArea(this.plugin.settings.laserArea);
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Left margin").setDesc("Set laser left margin").addSlider((sli) => {
      this.sliderMarginLeft = sli;
      let slider_val;
      if (this.plugin.settings.laserMarginLeft) {
        slider_val = this.plugin.settings.laserMarginLeft;
      } else {
        slider_val = DEFAULT_SETTINGS.laserMarginLeft;
      }
      sli.setDynamicTooltip();
      sli.setLimits(0, 500, 1);
      sli.setValue(slider_val);
      sli.onChange((val) => {
        this.plugin.settings.laserMarginLeft = val;
        this.plugin.setLaserMargins(val, this.plugin.settings.laserMarginRight);
        this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.sliderMarginLeft.setValue(DEFAULT_SETTINGS.laserMarginLeft);
        this.plugin.settings.laserMarginLeft = DEFAULT_SETTINGS.laserMarginLeft;
        this.plugin.setLaserMargins(this.plugin.settings.laserMarginLeft, this.plugin.settings.laserMarginRight);
        this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Right margin").setDesc("Set laser right margin").addSlider((sli) => {
      this.sliderMarginRight = sli;
      let slider_val;
      if (this.plugin.settings.laserMarginRight) {
        slider_val = this.plugin.settings.laserMarginRight;
      } else {
        slider_val = DEFAULT_SETTINGS.laserMarginRight;
      }
      sli.setDynamicTooltip();
      sli.setLimits(0, 500, 1);
      sli.setValue(slider_val);
      sli.onChange((val) => {
        this.plugin.settings.laserMarginRight = val;
        this.plugin.setLaserMargins(this.plugin.settings.laserMarginLeft, val);
        this.plugin.saveSettings();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("rotate-ccw");
      btn.setTooltip("Restore default");
      btn.onClick(() => {
        this.sliderMarginRight.setValue(DEFAULT_SETTINGS.laserMarginRight);
        this.plugin.settings.laserMarginRight = DEFAULT_SETTINGS.laserMarginRight;
        this.plugin.setLaserMargins(this.plugin.settings.laserMarginLeft, this.plugin.settings.laserMarginRight);
        this.plugin.saveSettings();
      });
    });
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  laserType: "line",
  laserColor: "blue",
  isLaserActive: false,
  laserIntensity: 1.5,
  laserArea: 82,
  laserMarginLeft: 0,
  laserMarginRight: 0
};
var LaserBeamPlugin = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.LB_ICON = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M15 4V2"/><path d="M15 16v-2"/><path d="M8 9h2"/><path d="M20 9h2"/><path d="M17.8 11.8 19 13"/><path d="M15 9h0"/><path d="M17.8 6.2 19 5"/><path d="m3 21 9-9"/><path d="M12.2 6.2 11 5"/></svg>';
  }
  async onload() {
    await this.loadSettings();
    this.LB_BODY = document.body;
    (0, import_obsidian2.addIcon)("wand-1", this.LB_ICON);
    if (this.settings.isLaserActive) {
      this.activateLaser();
    }
    this.addRibbonIcon("wand-1", "Laser beam", (evt) => {
      this.toggleLaser(evt);
    });
    this.addCommand({
      id: "laser-activate",
      name: "Toggle laser",
      callback: () => {
        if (this.settings.isLaserActive) {
          this.deactivateLaser();
        } else {
          this.activateLaser();
        }
      }
    });
    this.addCommand({
      id: "laser-focus",
      name: "Toggle laser focus type",
      callback: () => {
        if (this.settings.laserType === "line") {
          this.settings.laserType = "area";
          this.setLaserType(this.settings.laserType);
          this.saveSettings();
        } else {
          this.settings.laserType = "line";
          this.setLaserType(this.settings.laserType);
          this.saveSettings();
        }
      }
    });
    this.addSettingTab(new LaserBeamSettingTab(this.app, this));
    this.registerDomEvent(document, "mousemove", this.throttle((evt) => {
      if (this.settings.isLaserActive) {
        this.setLaserPos(evt);
      }
    }, 100));
  }
  throttle(fn, delay) {
    let isWaiting = false;
    return (evt) => {
      if (!isWaiting) {
        fn(evt);
        isWaiting = true;
        setTimeout(() => {
          isWaiting = false;
        }, delay);
      }
    };
  }
  toggleLaser(evt) {
    if (this.settings.isLaserActive) {
      this.deactivateLaser();
    } else {
      this.setLaserPos(evt);
      this.activateLaser();
    }
  }
  activateLaser() {
    this.LB_BODY.classList.add("lb-laser-active");
    this.setLaserType(this.settings.laserType);
    this.setLaserColor(this.settings.laserColor);
    this.setLaserIntensity(this.settings.laserIntensity);
    this.setLaserArea(this.settings.laserArea);
    this.setLaserMargins(this.settings.laserMarginLeft, this.settings.laserMarginRight);
    this.settings.isLaserActive = true;
    this.saveSettings();
  }
  deactivateLaser() {
    this.LB_BODY.classList.remove("lb-laser-active");
    this.settings.isLaserActive = false;
    this.saveSettings();
  }
  setLaserType(val) {
    ["lb-laser-type-line", "lb-laser-type-area"].map((c) => {
      this.LB_BODY.classList.remove(c);
    });
    switch (val) {
      case "line":
        this.LB_BODY.classList.add("lb-laser-type-line");
        break;
      case "area":
        this.LB_BODY.classList.add("lb-laser-type-area");
        break;
      default:
        this.LB_BODY.classList.add("lb-laser-type-line");
    }
  }
  setLaserColor(val) {
    ["lb-laser-blue", "lb-laser-green", "lb-laser-orange", "lb-laser-yellow", "lb-laser-red", "lb-laser-pink", "lb-laser-purple"].map((c) => this.LB_BODY.classList.remove(c));
    switch (val) {
      case "blue":
        this.LB_BODY.classList.add("lb-laser-blue");
        break;
      case "green":
        this.LB_BODY.classList.add("lb-laser-green");
        break;
      case "orange":
        this.LB_BODY.classList.add("lb-laser-orange");
        break;
      case "yellow":
        this.LB_BODY.classList.add("lb-laser-yellow");
        break;
      case "red":
        this.LB_BODY.classList.add("lb-laser-red");
        break;
      case "pink":
        this.LB_BODY.classList.add("lb-laser-pink");
        break;
      case "purple":
        this.LB_BODY.classList.add("lb-laser-purple");
        break;
      default:
        this.LB_BODY.classList.add("lb-laser-blue");
    }
  }
  setLaserPos(evt) {
    let LaserBeamPos;
    if (this.settings.laserType === "line") {
      LaserBeamPos = evt.clientY + 16;
    } else {
      LaserBeamPos = evt.clientY - this.settings.laserArea / 2;
    }
    this.LB_BODY.style.setProperty("--lb-laser-top", LaserBeamPos.toString() + "px");
  }
  setLaserArea(val) {
    if (val >= 30 && val <= 200) {
      this.LB_BODY.style.setProperty("--lb-laser-area", val.toString() + "px");
    }
  }
  setLaserIntensity(val) {
    if (val >= 0 && val <= 3) {
      this.LB_BODY.style.setProperty("--lb-laser-intensity", val.toString());
    }
  }
  setLaserMargins(val1, val2) {
    if (val1 >= 0 && val1 <= 500) {
      this.LB_BODY.style.setProperty("--lb-laser-margin-left", val1.toString() + "px");
    }
    if (val2 >= 0 && val2 <= 500) {
      this.LB_BODY.style.setProperty("--lb-laser-margin-right", val2.toString() + "px");
    }
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
